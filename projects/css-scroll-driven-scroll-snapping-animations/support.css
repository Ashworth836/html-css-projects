@layer base, rhythm, layout, components, default, overwrites;

@layer base {
    :root {
        /** Fonts and text */

        --min-tap-size: 48px;
        --min-tap-space: 8px;
        --max-content-width: 100rem;
        --max-reading-measure: 50ch;

        --font-family-monospace: 'Nimbus Mono PS', 'Courier New', monospace;
        --font-family-heading: 'Fraunces', Didot, 'Bodoni MT', 'Noto Serif Display', 'URW Palladio L', P052, Sylfaen, serif;
        --font-family-default: 'Noto Sans Display', Inter, Roboto, 'Helvetica Neue', 'Arial Nova', 'Nimbus Sans', Arial, sans-serif;


        /** Colors */
        --color-text: #fff0f4;
        --color-background: #000;
        --color-ui: oklch(65% 0.05 210);
        --color-primary: oklch(74% 0.15 32);
        --color-secondary: oklch(65% 0.13 210);

        --color-red: oklch(65% 0.18 15);
        --color-red-2: oklch(57% 0.2 15);
        --color-green: oklch(60% 0.16 135);
        --color-yellow: oklch(80% 0.16 85);
        --color-purple: oklch(62% 0.15 318);
        --color-green-2: oklch(54% 0.11 164);

        --color-link: var(--color-primary);
        --color-link-hover: var(--color-secondary);
    }
}

@layer rhythm {
    body {
        --font-size-min: 16;
        --font-size-max: 20;

        --line-height-min: 1.2;
        --line-height-max: 1.6;

        --font-size-default: var(--font-size);
        --line-height-default: var(--line-height);

        /** Spacing / rhythm */
        --spacing: var(--RHYTHM);

        /*
        * Useful heading scales
        * Minor Sixth: 1.6
        * Minor Third: 1.2
        * Major Third: 1.25
        * Perfect Fifth: 1.5
        * Golden Ratio: 1.618
        * Major Second: 1.125
        * Minor Second: 1.067
        * Perfect Fourth: 1.333
        * Augmented Fourth: 1.414

        *  Once CSS pow() is supported, we can use the following formula to create a scale:
        * --min-font-size: pow(var(--base-font-size-min) * var(--min-heading-scale)), var(--heading-level));
        *--max-font-size: pow(var(--base-font-size-max) * var(--max-heading-scale)), var(--heading-level));
        *  
        */

        --pu: 1.6;
        --pl: 1.125;

        --s1-min: calc(var(--base-font-size-min) / var(--pl));
        --s1-max: calc(var(--base-font-size-max) / var(--pu));

        --h6-min: var(--base-font-size-min);
        --h6-max: var(--base-font-size-max);

        --h5-min: calc(var(--base-font-size-min) * var(--pl));
        --h5-max: calc(var(--base-font-size-max) * var(--pu));

        --h4-min: calc(var(--h5-min) * var(--pl));
        --h4-max: calc(var(--h5-max) * var(--pu));

        --h3-min: calc(var(--h4-min) * var(--pl));
        --h3-max: calc(var(--h4-max) * var(--pu));

        --h2-min: calc(var(--h3-min) * var(--pl));
        --h2-max: calc(var(--h3-max) * var(--pu));

        --h1-min: calc(var(--h2-min) * var(--pl));
        --h1-max: calc(var(--h2-max) * var(--pu));
    }

    h1, h2 {
        --line-height-min: 1.25;
        --line-height-max: 1;

        font-size: var(--font-size);
        font-weight: 200;
        line-height: var(--line-height);
        padding-block: calc(var(--grid-correction, 0) / 2);
    }

    h2 {
        --font-size-min: var(--h2-min);
        --font-size-max: var(--h2-max);
    }
}

@layer base {
    :root {
        box-sizing: border-box;
        overflow-wrap: break-word;
        -webkit-text-size-adjust: 100%;
    }

    *,
    ::before,
    ::after {
        box-sizing: inherit;
        background-repeat: no-repeat;
    }

    ::-moz-selection {
        color: highlightText;
        background-color: highlight;
        text-shadow: none !important;
    }

    ::selection {
        color: highlightText;
        background-color: highlight;
        text-shadow: none !important;
    }

    html {
        height: 100%;
        scroll-behavior: smooth;
        overflow-x: hidden;
    }

    body {
        margin: 0;
        min-height: 100%;
        font-size-adjust: from-font;
        color: var(--color-text, black);
        text-rendering: optimizeLegibility;
        font-size: var(--font-size-default, 1em);
        line-height: var(--line-height-default, 1.5);
        font-family: var(--font-family-default, sans-serif);
        background-color: var(--color-background, white);
    }

    main { outline: 0; }

    a {
        color: var(--color-link, blue);
        transition: 0.25s ease-in-out;

        &:hover,
        &:focus {
            color: var(--color-link-hover, var(--color-link, blue));
        }
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        font-weight: 400;
        line-height: var(--line-height-heading, 1.25);
        font-family: var(--font-family-heading, var(--font-family-default, 1rem));
        -webkit-margin-before: calc(var(--margin-heading-start, var(--spacing, 1.5rem) * 2));
        margin-block-start: calc(var(--margin-heading-start, var(--spacing, 1.5rem) * 2));
        -webkit-margin-after: var(--margin-heading-end, var(--spacing, 1.5rem));
        margin-block-end: var(--margin-heading-end, var(--spacing, 1.5rem));
    }

    /** Limit width of objects with intrinsic size */
    img,
    picture,
    object,
    video,
    embed,
    iframe {
        height: auto;
        max-width: 100%;
    }
}

@layer rhythm {

    /**Responsive typography with vertical rhythm*/
    * {
        /* Step 1: Establish individual responsive font-size */
        
        /* 
       *Min and max font sizes to screen sizes 
      *That is, font size will be 16px at 320px screen width and 20px at 1440px screen width
      *These values can be customized on each element to automatically update the formula
      */
        --font-size-min: 16;
        --font-size-max: 20;
        --font-size-min-viewport: 320;
        --font-size-max-viewport: 1440;

        /* 
        * Converting from px to rem automatically for convenience and accessibility
        * If you want to set font-sizes in rem units from the start, you can set --font-size-units to 1rem
        * Default 1rem = 16px, so 1px = 0.0625rem 
        */
        --font-size-units: calc(0.0625rem);

        /** Math. Don't worry about it. And don't touch. */
        --_font-size-step: calc((var(--font-size-max) - var(--font-size-min)) / (var(--font-size-max-viewport) - var(--font-size-min-viewport)));

        --_font-size-base-value: calc(var(--font-size-min) - var(--font-size-min-viewport) * var(--_font-size-step));

        /* 
        * Create font-size custom prop on all elements
        * All elements can now use the --font-size prop

       * What's more, we can tweak the values established above such as 
       * --font-size-min and --font-size-max, and the formula will update automatically
       * The same applies to the viewport units --font-size-min-viewport and --font-size-max-viewport
       * We can even set a custom --font-size prop on any element, and it will override the default 
        */

        --font-size: clamp(min(var(--font-size-min), var(--font-size-max)) * var(--font-size-units),
                var(--_font-size-base-value) * var(--font-size-units) + var(--_font-size-step) * 100vw,
                max(var(--font-size-max), var(--font-size-min)) * var(--font-size-units));

        /** Using ems to lock current line-height to current font-size */
        --line-height-units: 1em;

        /** Min and max line-height */
        --line-height-min: 1.2;
        --line-height-max: 1.6;

        /** Same viewport boundaries as font-size, using font-size values to convert from pixels */
        --line-height-min-viewport: calc(320 / var(--font-size-min));
        --line-height-max-viewport: calc(1440 / var(--font-size-max));

        /** You know the drill. No touchy. */
        --_line-height-step: calc((var(--line-height-max) - var(--line-height-min)) / (var(--line-height-max-viewport) - var(--line-height-min-viewport)));

        --_line-height-base-value: calc(var(--line-height-min) - var(--line-height-min-viewport) * var(--_line-height-step));

        /* 
        * Just like with --font-size, all elements will now have access to responsive line-height
        * And we can tweak the values established above such as --line-height-min and --line-height-max
        */
        --line-height: clamp(min(var(--line-height-min), var(--line-height-max)) * var(--line-height-units),
                var(--_line-height-base-value) * var(--line-height-units) + var(--_line-height-step) * 100vw,
                max(var(--line-height-max), var(--line-height-min)) * var(--line-height-units));
    }

    body {
        /** We can now set font-size and line-height to their respective props */
        font-size: var(--font-size);
        line-height: var(--line-height);

        /* 
        * These are our new rem-units and can be used whenever needed to refer to responsive body-font
        * NOTE: Please treat this as a CONST and do not edit or overwrite 
        */
        --RHYTHM_UNITS: var(--font-size);

        /*
        * Create rhythm by locking to body line-height
        * This unit can now be used anywhere to refer back to the original body line-height
        * and thus establish a vertical rhythm
        * NOTE: Please treat this as a CONST and do not edit or overwrite
        */
        --RHYTHM: clamp(min(var(--line-height-min), var(--line-height-max)) * var(--RHYTHM_UNITS),
                var(--_line-height-base-value) * var(--RHYTHM_UNITS) + var(--_line-height-step) * 100vw,
                max(var(--line-height-max), var(--line-height-min)) * var(--RHYTHM_UNITS));

        /** Here, a safe prop you can overwrite and play with as needed */
        --spacing: var(--RHYTHM);

        /** Let's save these just in case we need them */
        --base-font-size-min: var(--font-size-min);
        --base-font-size-max: var(--font-size-max);
        --base-line-height-min: var(--line-height-min);
        --base-line-height-max: var(--line-height-max);
    }
}

/*
 * Custom properties used
 * Be sure to set these to customize the reset otherwise the defaults will be used
 *
 * --section-spacing-multiplier: 1, 2, 3, 4 (media queries)
 * --section-spacing: calc(var(--spacing, 1.5rem) * var(--section-spacing-multiplier));
 * --max-content-width: 100rem
 *
 */

/**----------  Page elements  ----------*/

@layer layout {

    header,
    main,
    section,
    article,
    aside,
    nav,
    form,
    div,
    footer {
        /** Creates section spacing variable for section-like elements */
        --section-spacing-multiplier: 1;
        --section-spacing: calc(var(--spacing, 1.5rem) * var(--section-spacing-multiplier));

        @media (min-width: 40em) {
            --section-spacing-multiplier: 2;
        }

        @media (min-width: 60em) {
            --section-spacing-multiplier: 3;
        }

        @media (min-width: 80em) {
            --section-spacing-multiplier: 4;
        }

        @media (min-width: 100em) {
            --section-spacing-multiplier: 5;
        }
    }

    header,
    section,
    footer {
        /** Limit width of an element while maintaining padding and centering */
        padding-inline: max(var(--section-spacing), calc(50% - var(--max-content-width, 100rem) / 2));
    }

    section {
        padding-block: var(--section-spacing);
    }
}

.site-header {
    position: fixed;
    overflow: auto;
    z-index: 10000;
    inset-inline: 0;
    inset-block-end: 0;
    padding-block: calc(var(--spacing) / 2);

    @media (min-width: 64rem) {
        display: flex;
        flex-direction: row;
        inset-block-start: 0;
        align-items: baseline;
        inset-block-end: auto;
        justify-content: space-between;
    }
}

@supports(animation-timeline: view()) {
    .site-header::after {
        background-image: linear-gradient(to right, transparent, black);
        content: '';
        display: block;
        position: absolute;
        top: calc(var(--spacing) / 2);
        right: 0;
        width: 33%;
        height: calc(var(--spacing) * 1.5 + 2px);
        pointer-events: none;
    }
}

.fieldset-wrapper {
    --height: calc(var(--spacing) * 2);

    overflow: auto;
    border-radius: calc(var(--height) / 2);

    /** Prevent aliased border due to overflow clipping with border-radius */
    padding-inline: 1px;
}

fieldset {
    --font-size-min: 14;
    --font-size-max: 16;

    padding: 0;
    display: flex;
    margin: 0 auto;
    width: max-content;
    border-radius: inherit;
    width: -moz-max-content;
    width: -webkit-max-content;
    backdrop-filter: blur(10px);
    font-size: var(--font-size);
    border: 1px solid var(--color-ui);
    -webkit-backdrop-filter: blur(10px);
    background-color: hsla(0deg, 0%, 0%, 0.5);
    
    @media (min-width: 64rem) {
        margin: 0;
    }
}

label {
    --transition: 0.01s;

    position: relative;
    overflow: hidden;
    white-space: nowrap;
    border-radius: inherit;
    padding-inline: var(--spacing);
    padding-block: calc(var(--spacing) / 4);
    transition: var(--transition) linear;

    &::before {
        content: '';
        position: absolute;
        display: block;
        inset: 0;
        z-index: -1;
        border-radius: inherit;
        transform: translateX(100.5%);
        background-color: var(--color-ui);
        transition: inherit;
    }
}

:checked+label {
    --transition: 0.25s;

    color: var(--color-background);
    overflow: visible;

    &::before {
        transform: translateX(0);
    }

    &~label::before {
        transform: translateX(-100.5%);
    }
}

legend {
    color: var(--color-secondary);
}

input {
    accent-color: var(--color-primary);
}

/** Hides elements visually, leaves accessible to screenreaders */
.sr-only {
    position: absolute;
    padding: 0;
    width: 1px;
    height: 1px;
    margin: -1px;
    border-width: 0;
    overflow: hidden;
    white-space: nowrap;
    clip: rect(0, 0, 0, 0);
}

@media (min-width: 64rem) {
    h1.sr-only {
        --font-size-min: 14;
        --font-size-max: 16;

        margin: 0;
        all: unset;
        font-weight: 500;
        letter-spacing: 0.01em;
        color: var(--color-text);
        font-size: var(--font-size);
        font-family: var(--font-family-default);
    }
}

nav {
    --indicator-number: 5;
    --indicator-top: 50dvb;
    --indicator-right: var(--spacing);

    --indicator-size: 1em;
    --indicator-padding: calc((var(--min-tap-size) - var(--indicator-size)) / 2);
    --indicator-clipped-margins: var(--indicator-padding) * 2;
    --indicator-total-size: calc(var(--indicator-size) + var(--indicator-padding) * 2);

    --indicator-gap: var(--min-tap-space);
    --indicator-total-gap: calc(var(--indicator-gap) * (var(--indicator-number) - 1));

    --indicator-total-height: calc(var(--indicator-total-size) * var(--indicator-number) + var(--indicator-total-gap) - var(--indicator-clipped-margins));

    /** Make indicators smaller when mouse is being used */
    @media (pointer: fine) {
        --indicator-padding: 0.25em;
    }

    z-index: 100;
    position: fixed;
    inset-block-start: var(--indicator-top);
    inset-inline-end: var(--indicator-right);
    margin-block-start: calc(var(--indicator-total-height) / -2);
    -webkit-margin-before: calc(var(--indicator-total-height) / -2);

    & ul {
        margin: 0;
        padding: 0;
        display: flex;
        position: relative;
        flex-direction: column;
        gap: var(--indicator-gap);

        &::before {
            --size: calc(var(--indicator-size));

            content: '';
            z-index: -1;
            padding: 3px;
            inset-inline: 0;
            position: absolute;
            margin-inline: auto;
            border-radius: 50%;
            width: var(--size);
            height: var(--size);
            background-color: currentColor;
            color: var(--color-indicator, var(--color-text));
            box-shadow: inset 0 0 0 4px var(--color-background);
        }
    }

    & li:first-of-type {
        margin-block-start: calc(var(--indicator-padding) * -1);
        -webkit-margin-before: calc(var(--indicator-padding) * -1);
    }

    & li:last-of-type {
        margin-block-end: calc(var(--indicator-padding) * -1);
        -webkit-margin-after: calc(var(--indicator-padding) * -1);
    }

    & li,
    & a {
        display: block;
    }

    & a {
        --color-link: var(--color-text);

        padding: var(--indicator-padding);

        &::before {
            content: '';
            display: block;
            border: 1px solid;
            border-radius: 50%;
            width: var(--indicator-size);
            height: var(--indicator-size);
        }
    }
}

@supports not (animation-timeline: scroll()) {
    nav {
        display: none;
    }
}

footer {
    --font-size-min: 14;
    --font-size-max: 16;

    z-index: 100;
    text-align: center;
    position: relative;
    color: var(--color-accent);
    font-size: var(--font-size);
}

.emoji {
    position: relative;
    background-color: var(--color-background);

    &::after {
        content: '';
        inset: 0;
        position: absolute;
        background-color: var(--color-primary);
        mix-blend-mode: hue;
    }
}

.content {
    height: 100%;
    display: flex;
    position: relative;
    align-items: center;
    flex-direction: column;
    justify-content: center;
    padding-inline: inherit;
    padding-block: var(--spacing);

    @media (min-width: 64rem) {
        flex-direction: row;
        justify-content: space-between;
    }

    & strong,
    & code {
        color: var(--color-highlight);
    }

    & code {
        font-family: var(--font-family-default);
    }

    & .selector {
        --color-property: var(--color-highlight);

        font-weight: 700;
        color: var(--color-selector);
    }

    & .property {
        --color-property: var(--color-highlight);

        font-weight: 700;
        color: var(--color-property);
    }

    & ul {
        --font-size-min: 14;
        --font-size-max: 16;

        margin: 0;
        padding: 0;
        font-weight: 400;
        font-size: var(--font-size);
        list-style-position: inside;
    }

    & li {
        margin-bottom: calc(var(--spacing) / 2);

        &::marker {
            content: '🌷 ';
            color: var(--color-highlight);
        }
    }
}

h2,
.text {
    /** Making space for the scroll indicators */
    padding-inline-end: calc(var(--min-tap-size) + var(--spacing));
    -webkit-padding-end: calc(var(--min-tap-size) + var(--spacing));

    @media (min-width: 64rem) {
        padding-inline-end: 0;
        -webkit-padding-end: 0;
    }
}

@supports not (animation-timeline: scroll()) {

    h2,
    .text {
        padding-inline-end: 0;
        -webkit-padding-end: 0;
    }
}

h2 {
    width: 100%;
    line-height: 1;
    margin-block: var(--spacing);
    text-shadow: 1px 2px 0.1em hsla(0, 0%, 0%, 0.5);

    @media (min-width: 64rem) {
        flex: 1;
        margin-block-end: 0;
        -webkit-margin-after: 0;
    }
}

.text {
    --offset: 200px;
    --height: 200px;
    --intrinsic-width: 587;
    --intrinsic-height: 930;

    & img {
        inset: 0;
        z-index: -1;
        opacity: 0.2;
        display: block;
        position: absolute;
        object-fit: contain;
        -o-object-fit: contain;
        object-position: top center;
        -o-object-position: top center;
    }

    @media (min-width: 64rem) {
        --offset: calc(var(--height) / 3);
        --height: min(100dvb, 33vw * var(--intrinsic-height) / var(--intrinsic-width));

        flex: 1;
        z-index: -1;
        font-weight: 200;
        position: relative;
        padding-block-start: var(--spacing);
        -webkit-padding-before: var(--spacing);

        & img {
            inset: auto;
            opacity: 0.65;
            position: relative;
            float: inline-start;
            height: var(--height);
            shape-outside: var(--image);
            shape-margin: var(--spacing);
            margin-left: calc((1 - var(--intrinsic-width) / var(--intrinsic-height)) * -100%);

            & + * {
                margin-top: calc(var(--spacing) * 3);
            }
        }
    }

    @media (min-width: 64rem) and (min-height: 45rem) {
        & img + * {
            margin-top: calc(var(--spacing) * 4);
        }
    }

    @media (min-width: 90rem) and (min-height: 35rem) {
        & img + * {
            margin-top: var(--offset);
        }
    }
}

section:nth-child(1) {
    --color-highlight: var(--color-primary);
    --color-selector: var(--color-secondary);
    --image: url('https://assets.codepen.io/197359/flower-white.png');
}

section:nth-child(2) {
    --margin-top: 10dvi;
    --color-selector: var(--color-green);
    --color-highlight: var(--color-yellow);
    --image: url('https://assets.codepen.io/197359/flower-yellow.png');
}

section:nth-child(3) {
    --color-selector: var(--color-primary);
    --color-highlight: var(--color-secondary);
    --image: url('https://assets.codepen.io/197359/flower-blue.png');
}

section:nth-child(4) {
    --color-selector: var(--color-green-2);
    --color-highlight: var(--color-red);
    --image: url('https://assets.codepen.io/197359/flower-red.png');
}

section:nth-child(5) {
    --margin-top: 10dvi;
    --color-selector: var(--color-red-2);
    --color-highlight: var(--color-purple);
    --image: url('https://assets.codepen.io/197359/flower-purple.png');
}